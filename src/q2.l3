#lang racket

;; Signature: append(lst1,lst2)
;; Type: [ List(any)*List(any) -> List(any)]
;; Purpose: given 2 lists return a concatenation of both
;; Pre-conditions: none
;; Tests: (append '(0 1 2) '(3 4 5)) ==> '(0 1 2 3 4 5)
(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
        lst2
        (cons (car lst1)(append (cdr lst1) lst2))                 
       )
   )
)

;; Signature: reverse(lst)
;; Type: [ List(any) -> List(any)]
;; Purpose: given a list return the items of the list as a list in a reversed order
;; Pre-conditions: none
;; Tests: (reverse '(0 1 2)) ==> '(2 1 0)
(define reverse 
  (lambda (lst)
        (if (empty? lst)
            '()
            (append (reverse (cdr lst)) (cons (car lst) '()))
        )
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      @TODO
   )
)


(define payment
  (lambda (n coins-lst)
        @TODO
  )
)
                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)