(define empty? 
  (lambda (lst)
    (if (eq? lst '()) #t #f)
   )
)

(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
        lst2
        (cons (car lst1)(append (cdr lst1) lst2))                 
      )
   )
)

(define reverse 
  (lambda (lst)
        (if (empty? lst)
            '()
            (append (reverse (cdr lst)) (cons (car lst) '()))
        )
  )
)

(define duplicate-item
   (lambda(itm dup-count)
      (if (= dup-count 0)
          '()
          (append (cons itm '()) (duplicate-item itm (- dup-count 1)))
      )
   )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (empty? lst)
          '()
          (append
            (duplicate-item (car lst) (car dup-count))
            (duplicate-items (cdr lst) (append (cdr dup-count) (cons (car dup-count) '())))
           )
      )
   )
)


(define cut
  (lambda (lst num)
    (if (empty? lst)
      '()
      (if (= (car lst) num)
        (cut (cdr lst) num)
        (append (cons (car lst) '()) (cut(cdr lst) num))
      )
    )
  )
)


(define payment
   (lambda(sum lst)
    (if (> 0 sum) 0
    (if (= 0 sum) 1 
    (if (empty? lst)
       0
          (+(payment sum (cut lst (car lst))) (payment (- sum (car lst)) (cdr lst))) 
    )
   )
  )
 )
)

(define compose-n
  (lambda( f n)
        (if (= n 1)
          f
          (lambda (x) (f ((compose-n f (- n 1)) x)))
        )
  )
)